version: "3.7"
services:
  plex:
    image: plexinc/pms-docker:${PLEX_VERSION}
    container_name: plex
    hostname: ${HOSTNAME}
    # runtime: nvidia ## required if default runtime isn't set to nvidia
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - PLEX_CLAIM=${PLEX_CLAIM}
      - ADVERTISE_IP=http://${PLEX_ADVERTISE_IP}:${PLEX_WEB_PORT}
      - VERSION=${PLEX_VERSION}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
    # devices:
    #   - /dev/dri:/dev/dri
    #   - /dev/nvidia0:/dev/nvidia0
    #   - /dev/nvidiactl:/dev/nvidiactl
    #   - /dev/nvidia-modeset:/dev/nvidia-modeset
    #   - /dev/nvidia-uvm:/dev/nvidia-uvm
    #   - /dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools
    volumes:
      - plexconfig:/config
      - plextranscode:/transcode
      - /storage/audio:/audio
      - /storage/video:/video
      - /storage/photo:/photo:ro
    network_mode: host
    restart: unless-stopped

  # airsonic:

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    networks:
      - infrastructure_local
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.entrypoints=http"
      - "traefik.http.routers.radarr.rule=Host(${RADARR_HOSTNAMES})"
      - "traefik.http.routers.radarr.middlewares=https-redirect@file"
      - "traefik.http.routers.radarr-secure.entrypoints=https"
      - "traefik.http.routers.radarr-secure.rule=Host(${RADARR_HOSTNAMES})"
      - "traefik.http.routers.radarr-secure.tls=true"
      - "traefik.http.routers.radarr-secure.tls.certresolver=http"
      - "traefik.http.routers.radarr-secure.service=radarr"
      - "traefik.http.services.radarr.loadbalancer.server.port=${RADARR_PORT}"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - configradarr:/config
      - ${VIDEO_DIR}:/video
      - ${DOWNLOAD_DIR}:/downloads
      - nullvol:/movies:ro # keep things clean on the docker host
    depends_on:
      - rutorrent
      - jackett
    restart: unless-stopped

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    networks:
      - infrastructure_local
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.entrypoints=http"
      - "traefik.http.routers.sonarr.rule=Host(${SONARR_HOSTNAMES})"
      - "traefik.http.routers.sonarr.middlewares=https-redirect@file"
      - "traefik.http.routers.sonarr-secure.entrypoints=https"
      - "traefik.http.routers.sonarr-secure.rule=Host(${SONARR_HOSTNAMES})"
      - "traefik.http.routers.sonarr-secure.tls=true"
      - "traefik.http.routers.sonarr-secure.tls.certresolver=http"
      - "traefik.http.routers.sonarr-secure.service=sonarr"
      - "traefik.http.services.sonarr.loadbalancer.server.port=${SONARR_PORT}"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - configsonarr:/config
      - ${VIDEO_DIR}:/video
      - nullvol:/tv:ro # keep things clean on the docker host
      - ${DOWNLOAD_DIR}:/downloads
    depends_on:
      - rutorrent
      - jackett
    restart: unless-stopped

  lidarr:
    image: linuxserver/lidarr
    container_name: lidarr
    networks:
      - infrastructure_local
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.entrypoints=http"
      - "traefik.http.routers.lidarr.rule=Host(${LIDARR_HOSTNAMES})"
      - "traefik.http.routers.lidarr.middlewares=https-redirect@file"
      - "traefik.http.routers.lidarr-secure.entrypoints=https"
      - "traefik.http.routers.lidarr-secure.rule=Host(${LIDARR_HOSTNAMES})"
      - "traefik.http.routers.lidarr-secure.tls=true"
      - "traefik.http.routers.lidarr-secure.tls.certresolver=http"
      - "traefik.http.routers.lidarr-secure.service=lidarr"
      - "traefik.http.services.lidarr.loadbalancer.server.port=${LIDARR_PORT}"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - configlidarr:/config
      - ${AUDIO_DIR}/music:/music
      - ${DOWNLOAD_DIR}:/downloads
    depends_on:
      - rutorrent
      - jackett
    restart: unless-stopped

  bazarr:
    image: linuxserver/bazarr
    container_name: bazarr
    networks:
      - infrastructure_local
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.entrypoints=http"
      - "traefik.http.routers.bazarr.rule=Host(${BAZARR_HOSTNAMES})"
      - "traefik.http.routers.bazarr.middlewares=https-redirect@file"
      - "traefik.http.routers.bazarr-secure.entrypoints=https"
      - "traefik.http.routers.bazarr-secure.rule=Host(${BAZARR_HOSTNAMES})"
      - "traefik.http.routers.bazarr-secure.tls=true"
      - "traefik.http.routers.bazarr-secure.tls.certresolver=http"
      - "traefik.http.routers.bazarr-secure.service=bazarr"
      - "traefik.http.services.bazarr.loadbalancer.server.port=${BAZARR_PORT}"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - configbazarr:/config
      - ${VIDEO_DIR}:/video
      - nullvol:/tv:ro # keep things clean on the docker host
      - nullvol:/movies:ro # keep things clean on the docker host
    depends_on:
      - radarr
      - sonarr
    restart: unless-stopped

  # mylar:

  # lazylibrarian:

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    networks:
      - infrastructure_local
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.entrypoints=http"
      - "traefik.http.routers.jackett.rule=Host(${JACKETT_HOSTNAMES})"
      - "traefik.http.routers.jackett.middlewares=https-redirect@file"
      - "traefik.http.routers.jackett-secure.entrypoints=https"
      - "traefik.http.routers.jackett-secure.rule=Host(${JACKETT_HOSTNAMES})"
      - "traefik.http.routers.jackett-secure.tls=true"
      - "traefik.http.routers.jackett-secure.tls.certresolver=http"
      - "traefik.http.routers.jackett-secure.service=jackett"
      - "traefik.http.services.jackett.loadbalancer.server.port=${JACKETT_PORT}"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - configjackett:/config
      - ${DOWNLOAD_DIR}:/downloads
    restart: unless-stopped

  rutorrent:
    image: linuxserver/rutorrent
    container_name: rutorrent
    networks:
      - infrastructure_local
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rutorrent.entrypoints=http"
      - "traefik.http.routers.rutorrent.rule=Host(${RUTORRENT_HOSTNAMES})"
      - "traefik.http.routers.rutorrent.middlewares=https-redirect@file"
      - "traefik.http.routers.rutorrent-secure.entrypoints=https"
      - "traefik.http.routers.rutorrent-secure.rule=Host(${RUTORRENT_HOSTNAMES})"
      - "traefik.http.routers.rutorrent-secure.tls=true"
      - "traefik.http.routers.rutorrent-secure.tls.certresolver=http"
      - "traefik.http.routers.rutorrent-secure.service=rutorrent"
      - "traefik.http.services.rutorrent.loadbalancer.server.port=${RUTORRENT_WEB_PORT}"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - configrutorrent:/config
      - ${DOWNLOAD_DIR}:/downloads
    ports:
      - 5000:5000
      - 51413:51413
      - 6881:6881/udp
    restart: unless-stopped

  ombi:
    image: linuxserver/ombi
    container_name: ombi
    networks:
      - infrastructure_local
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ombi.entrypoints=http"
      - "traefik.http.routers.ombi.rule=Host(${OMBI_HOSTNAMES})"
      - "traefik.http.routers.ombi.middlewares=https-redirect@file"
      - "traefik.http.routers.ombi-secure.entrypoints=https"
      - "traefik.http.routers.ombi-secure.rule=Host(${OMBI_HOSTNAMES})"
      - "traefik.http.routers.ombi-secure.tls=true"
      - "traefik.http.routers.ombi-secure.tls.certresolver=http"
      - "traefik.http.routers.ombi-secure.service=ombi"
      - "traefik.http.services.ombi.loadbalancer.server.port=${OMBI_PORT}"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - configombi:/config
    depends_on:
      - radarr
      - sonarr
      - lidarr
    restart: unless-stopped

  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    networks:
      - infrastructure_local
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tautulli.entrypoints=http"
      - "traefik.http.routers.tautulli.rule=Host(${TAUTULLI_HOSTNAMES})"
      - "traefik.http.routers.tautulli.middlewares=https-redirect@file"
      - "traefik.http.routers.tautulli-secure.entrypoints=https"
      - "traefik.http.routers.tautulli-secure.rule=Host(${TAUTULLI_HOSTNAMES})"
      - "traefik.http.routers.tautulli-secure.tls=true"
      - "traefik.http.routers.tautulli-secure.tls.certresolver=http"
      - "traefik.http.routers.tautulli-secure.service=tautulli"
      - "traefik.http.services.tautulli.loadbalancer.server.port=${TAUTULLI_PORT}"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - configtautulli:/config
      - logtautulli:/logs
    depends_on:
      - plex
    restart: unless-stopped

volumes:
  plexconfig:
  plextranscode:
    driver_opts:
      type: tmpfs
      device: tmpfs
  configradarr:
  configsonarr:
  configlidarr:
  configbazarr:
  configjackett:
  configrutorrent:
  configombi:
  configtautulli:
  logtautulli:
  nullvol:

networks:
  infrastructure_local:
    external: true